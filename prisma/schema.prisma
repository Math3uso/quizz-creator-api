// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// model User {
//   id           String        @id @unique @default(uuid())
//   name         String
//   email        String        @unique
//   passwordHash String
//   participant  Participant[]
// }

// model Participant {
//   id             String @id @unique @default(uuid())
//   correctAnswers Int

//   answers Answer[] @relation("ParticipantAnswers")

//   Quiz   Quiz?   @relation(fields: [quizId], references: [id])
//   quizId String?
//   User   User?   @relation(fields: [userId], references: [id])
//   userId String?
// }

// model Quiz {
//   id          String        @id @unique @default(uuid())
//   title       String
//   description String
//   quesions    Question[]
//   participant Participant[]
// }

// model Question {
//   id            Int      @id @unique @default(autoincrement())
//   question      String
//   correctAnswer Int?
//   answer        Answer[]
//   Quiz          Quiz?    @relation(fields: [quizId], references: [id])
//   quizId        String?
// }

// model Answer {
//   id         String    @id @unique @default(uuid())
//   content    String
//   Question   Question? @relation(fields: [questionId], references: [id])
//   questionId Int?

//   participants Participant[] @relation("ParticipantAnswers")
// }

enum Role {
  Admin
  Participant
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  passwordHash String
  participant  Participant[]
}

model Participant {
  id             String @id @default(uuid())
  correctAnswers Int
  role           Role

  answers Answer[] @relation("ParticipantAnswers")

  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}

model Quiz {
  id          String        @id @default(uuid())
  title       String
  description String
  questions   Question[]
  participant Participant[]
  start       Boolean       @default(false)
}

model Question {
  id            Int    @id @default(autoincrement())
  question      String
  correctAnswer Int?

  answers Answer[]

  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String?
}

model Answer {
  id      String @id @default(uuid())
  content String

  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int?

  participants Participant[] @relation("ParticipantAnswers")
}
